package factory.controller;

import factory.model.DigitalSignal;
import factory.model.WidgetKind;
import factory.swingview.Factory;

public class ToolController {
	private final DigitalSignal conveyor, press, paint;
	private final long pressingMillis, paintingMillis;
	private boolean pressing, painting;

	public ToolController(DigitalSignal conveyor, DigitalSignal press, DigitalSignal paint, long pressingMillis,
			long paintingMillis) {
		this.conveyor = conveyor;
		this.press = press;
		this.paint = paint;
		this.pressingMillis = pressingMillis;
		this.paintingMillis = paintingMillis;
		pressing = painting = false;
	}

	// When one thread is executing a synchronized method for an object, all other
	// threads that invoke synchronized methods
	// for the same object block (suspend execution) until the first thread is done
	// with the object

	// When stopping and starting conveyor is isolated in synchronized methods and
	// onSensor methods are left unsynced factory is
	// able to paint and press at the same time. This solution requires two state
	// variables: pressing and painting. Only once both
	// actions are completed may the conveyor start running again.

	// When replacing the sleep calls with wait throughput increases in spite of big
	// synced code blocks. The reason being that
	// sleep does not cause the lock on the object to release as opposed to wait
	// which releases the lock during the blocking time.
	// The result is that during eg. pressing, as soon as wait is called the
	// painting can begin.

	public synchronized void onPressSensorHigh(WidgetKind widgetKind) throws InterruptedException {
		//
		// TODO: you will need to modify this method
		//
		if (widgetKind == WidgetKind.BLUE_RECTANGULAR_WIDGET) {
			pressing = true;
			stopConveyor(painting);
			press.on();
			wait(pressingMillis);
			press.off();
			wait(pressingMillis); // press needs this time to retract
			pressing = false;
			startConveyor(painting);
		}
	}

	/** Helper method: sleep outside of monitor for ’millis’ milliseconds. */
    private void waitOutside(long millis) throws InterruptedException {
	    long timeToWakeUp = System.currentTimeMillis() + millis;
	    // ...
	    while (System.currentTimeMillis() < timeToWakeUp) {
	    	long dt = timeToWakeUp - System.currentTimeMillis();
	    	wait(dt);
	    }
    }

	private synchronized void startConveyor(boolean otherAction) {
		if (!otherAction) {
			conveyor.on();
		}
	}

	private synchronized void stopConveyor(boolean otherAction) {
		if (!otherAction) {
			conveyor.off();
		}
	}

	public synchronized void onPaintSensorHigh(WidgetKind widgetKind) throws InterruptedException {
		//
		// TODO: you will need to modify this method
		//
		if (widgetKind == WidgetKind.ORANGE_ROUND_WIDGET) {
			stopConveyor(pressing);
			painting = true;
			paint.on();
			wait(paintingMillis);
			paint.off();
			painting = false;
			startConveyor(pressing);
		}
	}

	// -----------------------------------------------------------------------

	public static void main(String[] args) {
		Factory factory = new Factory();
		factory.startSimulation();
	}
}
